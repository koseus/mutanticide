BACKUP_BENCHMARK="/Users/mkose/backup/ProducerConsumer"
TEMP_BENCHMARK="/Users/mkose/temp/ProducerConsumer"
LAB_PATH="/Users/mkose/Dropbox/workspace/Mutanticide"
REPORT_PATH="/Users/mkose/producer-results"
CLASSPATH="/Users/mkose/Library/junit-4.12.jar:/Users/mkose/Library/hamcrest-core-1.3.jar"
ASM_PATH="/Users/mkose/Library/asm-5.0.4/lib/asm-5.0.4.jar:/Users/mkose/Library/asm-5.0.4/lib/asm-tree-5.0.4.jar"



# Depth 1
for f in $BACKUP_BENCHMARK/bin/*.class
do
  #FILELIST[length_of_FILELIST + 1]=filename
  FILELIST[${#FILELIST[@]}+1]=$(echo "$f");
done

# Depth 2
for f in $BACKUP_BENCHMARK/bin/*/*.class
do
  #FILELIST[length_of_FILELIST + 1]=filename
  FILELIST[${#FILELIST[@]}+1]=$(echo "$f");
done


counter=1
testCounter=1
for f in ${FILELIST[@]}
do
  fileName=$(basename $f)
  # Remove *.class files

  if [[ $fileName == "*.class" ]]; then
    unset FILELIST[$counter]

  elif [[ $fileName == *"Abstract"* ]]; then
    unset FILELIST[$counter]

  # Remove internal classes
  elif [[ $fileName == *"$"* ]]; then
    unset FILELIST[$counter]

  # Remove package-info.class files
  elif [[ $fileName == "package-info.class" ]]; then
    unset FILELIST[$counter]

  # Remove test classes
  elif [[ $f == *"test"* ]]; then
    unset FILELIST[$counter]
    TESTS_TO_RUN[$testCounter]=$f
    ((testCounter+=1))

  elif [[ $fileName == *"Test.class" ]]; then
    unset FILELIST[$counter]
    TESTS_TO_RUN[$testCounter]=$f
    ((testCounter+=1))
  fi

  ((counter+=1))
done

# Copy test classes to temp directory
for t in ${TESTS_TO_RUN[@]}
do
  cp $t $TEMP_BENCHMARK/bin/
done

# Purge filelist into classes_to_mutate and remove $BACKUP_BENCHMARK prefix
counter=1
prefix=$BACKUP_BENCHMARK/bin/
for f in ${FILELIST[@]}
do
  if [ -n $f ]; then
    CLASSES_TO_MUTATE[$counter]=${f#$prefix}
    ((counter+=1))
  fi
done

# Remove $BACKUP_BENCHMARK prefix, .class suffix and replace / with .
counter=1
prefix=$BACKUP_BENCHMARK/bin/
suffix=".class"
for t in ${TESTS_TO_RUN[@]}
do
  t=${t#$prefix}
  t=${t%$suffix}
  t=${t////.}
  TESTS_TO_RUN[$counter]=$t
  ((counter+=1))
done


printf "%d%s\n" ${#CLASSES_TO_MUTATE[@]} " classes to mutate"
printf "%s\n" ${CLASSES_TO_MUTATE[@]}

#exit

printf "%d%s\n" ${#TESTS_TO_RUN[@]} " tests to run"
printf "%s\n" ${TESTS_TO_RUN[@]}

#exit


counter=1
for class in ${CLASSES_TO_MUTATE[@]}
do
  # Extract the file name
  fileName=$(basename $class .class)
  echo "CLASS " $fileName

  # Copy the next class to mutate to our lab
  cp $BACKUP_BENCHMARK/bin/$class $LAB_PATH/bin
  cd $LAB_PATH/bin

  # class = /path/fileName.class
  echo $class
  echo $fileName

  # Create mutants
  java -cp .:$ASM_PATH Main $fileName

  # For each mutant created
  cd out

  for dir in */;
  do
    # /Users/mkose/Dropbox/workspace/Mutanticide/out/Mutation
    cd $LAB_PATH/bin/out/$dir

    # Copy the mutant over the original class
    dirName=$(dirname $TEMP_BENCHMARK/bin/$class)
    cp $fileName.class $dirName/

    cd $TEMP_BENCHMARK/bin
    echo Applying mutation $dir on $fileName
    echo $(gdate +"%H%M%S") >>$REPORT_PATH/$fileName\_${dir%/}.txt

    for test in ${TESTS_TO_RUN[@]}
    do
      echo "Running test" $test
      echo "Running test" $test >>$REPORT_PATH/$fileName\_${dir%/}.txt
      #echo gtimeout 10s java  -cp .:/Users/mkose/Library/junit-4.12.jar:/Users/mkose/Library/hamcrest-core-1.3.jar org.junit.runner.JUnitCore $test}
      OUTPUT="$(gtimeout 10s java  -cp .:$CLASSPATH org.junit.runner.JUnitCore $test &)"
      echo $OUTPUT
      if [[ $OUTPUT == *"failure"* ]] || [[ $OUTPUT == *"Exception"* ]]
      then
        echo "DEAD" >>$REPORT_PATH/$fileName\_${dir%/}.txt
      else
        echo "ALIVE" >>$REPORT_PATH/$fileName\_${dir%/}.txt
      fi
    done
    echo $(gdate +"%H%M%S") >>$REPORT_PATH/$fileName\_${dir%/}.txt
  done


  wait


  # CLEAN UP
  # Remove the class from the lab
  rm $LAB_PATH/bin/$fileName.class

  # Copy the original class back in place
  dirName=$(dirname $TEMP_BENCHMARK/bin/$class)
  cp $BACKUP_BENCHMARK/bin/$class $dirName/

  # Remove the mutants
  rm -fr /Users/mkose/Dropbox/workspace/Mutanticide/bin/out/*
done
